#!/usr/bin/env python2

# based on https://github.com/progrium/pyjwt/blob/master/bin/jwt

"""Encode or decode JSON Web Tokens based on input

Decoding examples:

%(prog)s --key=secret json.web.token
%(prog)s --no-verify json.web.token

Encoding requires the key option and takes space separated key/value pairs
separated by equals (=) as input. Examples:

%(prog)s --key=secret iss=me exp=1302049071
%(prog)s --key=secret foo=bar exp=+10

The exp key is special and can take an offset to current Unix time.
"""

import sys
import time
import json
import argparse

import jwt

p = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter,
)

p.add_argument('-n', '--no-verify', action='store_false', dest='verify', default=True,
               help='ignore signature verification on decode')
p.add_argument('-k', '--key', metavar='KEY', default='',
               help='the secret key to sign with')
p.add_argument('--alg', dest='algorithm', metavar='ALG', default='HS256',
               help='crypto algorithm to sign with. default=HS256')
p.add_argument('fields', nargs='*', metavar='KEY=VALUE', help=argparse.SUPPRESS)

args = p.parse_args()

# Try to decode
if not sys.stdin.isatty():
    token = sys.stdin.read().strip()
elif args.fields:
    token = args.fields[0]
else:
    p.print_help()
    sys.exit(1)

try:
    try:
        payload = jwt.verify(token, key=args.key)
    except jwt.BadSignature:
        # XXX --no-verify doesn't actually work because we can't get the payload
        if args.verify:
            raise
except jwt.BadSyntax:
    # must not have been a JWT
    pass
else:
    print json.dumps(payload)
    sys.exit(0)

# Try to encode
if args.key is None:
    print >>sys.stderr, "Key is required when encoding. See --help for usage."
    sys.exit(1)

# Build payload object to encode
payload = {}
for arg in args.fields:
    k, _, v = arg.partition('=')
    # exp +offset special case?
    if k == 'exp' and v[0] == '+' and len(v) > 1:
        v = int(time.time()) + int(v[1:])
    else:
        try:
            v = json.loads(v)
        except ValueError:
            pass
    payload[k] = v

print jwt.sign(payload=json.dumps(payload), key=args.key, alg=args.algorithm)
